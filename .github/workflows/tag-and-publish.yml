name: Tag And Publish New Release

on:
  pull_request:
    types: [closed]
    branches: [release]

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create Tag
  semver_changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.semver.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create SemVer Tag and Release
        id: semver
        uses: K-Phoen/semver-release-action@v1.3.2
        with:
          release_branch: release
          release_strategy: release
          tag_format: v%major%.%minor%.%patch%
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semver.outputs.tag }}
          writeToFile: true

      - name: Commit updated CHANGELOG.md
        if: steps.changelog.outputs.changes != ''
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for ${{ steps.semver.outputs.tag }}"

      - name: Push updated CHANGELOG to release
        if: steps.changelog.outputs.changes != ''
        run: |
          git push origin release

  # Publish New Release
  release_pr:
    needs: semver_changelog
    runs-on: ubuntu-latest

    env:
      NEW_TAG: ${{ needs.semver_changelog.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0         # full history
          fetch-tags: true

      - name: Print debug info
        run: |
          git fetch origin production
          echo "production HEAD: $(git rev-parse origin/production)"
          echo "release HEAD: $(git rev-parse origin/release)"
          git diff --stat origin/production origin/release

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create & auto-merge Changelog PR into release
        if: needs.semver_changelog.outputs.tag != ''
        run: |
          gh pr create \
            --head release \
            --base release \
            --title "ðŸ”– Update CHANGELOG for ${NEW_TAG}" \
            --body "Automated changelog update for ${NEW_TAG}"
          gh pr merge \
            --auto \
            --delete-branch
        working-directory: .
      # - name: Create PR to release (changelog)
      #   if: steps.changelog.outputs.changes != ''
      #   run: |
      #     gh pr create \
      #       --head release \
      #       --base release \
      #       --title "ðŸ”– Update CHANGELOG for ${NEW_TAG}" \
      #       --body "Automated changelog update for ${NEW_TAG}"

      - name: Create & auto-merge Releaseâ†’Production PR
        run: |
          gh pr create \
            --head release \
            --base production \
            --title "ðŸ”€ Merge ${NEW_TAG} into production" \
            --body "Automated release after tagging ${NEW_TAG}"
          gh pr merge \
            --auto \
            --delete-branch
        working-directory: .

      # - name: Create Pull Request via CLI
      #   run: |
      #     gh pr create \
      #       --head release \
      #       --base production \
      #       --title "ðŸ”€ Merge release (${NEW_TAG}) into production" \
      #       --body "Automated PR created after tagging release: ${NEW_TAG}"
            
      # - name: Create Pull Request from release to production
      #   uses: peter-evans/create-pull-request@v7
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: release-to-production     # head branch (source)
      #     base: production                  # base branch (destination)
      #     title: 'Merge release into production'
      #     body: |
      #       Automated PR: merging release into production after tagging
      #     commit-message: 'Merge release into production'
      #     delete-branch: false
