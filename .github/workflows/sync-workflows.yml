name: Sync Workflow Files to Release, Testing, and Dev Branches

on:
  push:
    branches: [production]
    paths:
      - '.github/workflows/*.yml'

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  sync-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get dev-* branches
        id: get_dev_branches
        run: |
          DEV_BRANCHES=$(git ls-remote --heads origin 'dev-*' | awk '{print $2}' | sed 's|refs/heads/||' | tr '\n' ' ')
          echo "DEV_BRANCHES=$DEV_BRANCHES" >> $GITHUB_OUTPUT
          echo "Found dev branches: $DEV_BRANCHES"

      - name: Sync to release
        run: |
          TIMESTAMP=$(date +%s)
          git checkout -b sync-workflows-release-$TIMESTAMP
          git push origin sync-workflows-release-$TIMESTAMP
          PR_URL=$(gh pr create \
            --head sync-workflows-release-$TIMESTAMP \
            --base release \
            --title "Sync workflow files from production to release" \
            --body "Automated sync of .github/workflows/*.yml from production")
          gh pr edit "$PR_URL" --add-label changelog
          for i in {1..30}; do
            STATUS=$(gh pr status --json statusCheckRollup -q '.currentBranch.statusCheckRollup.state' --branch sync-workflows-release-$TIMESTAMP)
            if [[ "$STATUS" == "SUCCESS" ]]; then
              echo "✅ Status checks passed for release PR"
              gh pr merge "$PR_URL" --squash --delete-branch --admin
              exit 0
            fi
            echo "⏳ Waiting for status checks (attempt $i/30)..."
            sleep 10
          done
          echo "❌ Status checks did not pass within timeout for release PR"
          gh pr status --json statusCheckRollup --branch sync-workflows-release-$TIMESTAMP
          exit 1

      - name: Sync to testing
        run: |
          TIMESTAMP=$(date +%s)
          git checkout production
          git checkout -b sync-workflows-testing-$TIMESTAMP
          git push origin sync-workflows-testing-$TIMESTAMP
          PR_URL=$(gh pr create \
            --head sync-workflows-testing-$TIMESTAMP \
            --base testing \
            --title "Sync workflow files from production to testing" \
            --body "Automated sync of .github/workflows/*.yml from production")
          gh pr edit "$PR_URL" --add-label changelog
          for i in {1..30}; do
            STATUS=$(gh pr status --json statusCheckRollup -q '.currentBranch.statusCheckRollup.state' --branch sync-workflows-testing-$TIMESTAMP)
            if [[ "$STATUS" == "SUCCESS" ]]; then
              echo "✅ Status checks passed for testing PR"
              gh pr merge "$PR_URL" --squash --delete-branch --admin
              exit 0
            fi
            echo "⏳ Waiting for status checks (attempt $i/30)..."
            sleep 10
          done
          echo "❌ Status checks did not pass within timeout for testing PR"
          gh pr status --json statusCheckRollup --branch sync-workflows-testing-$TIMESTAMP
          exit 1

      - name: Sync to dev-* branches
        env:
          DEV_BRANCHES: ${{ steps.get_dev_branches.outputs.DEV_BRANCHES }}
        run: |
          for BRANCH in $DEV_BRANCHES; do
            TIMESTAMP=$(date +%s)
            git checkout production
            git checkout -b sync-workflows-$BRANCH-$TIMESTAMP
            git push origin sync-workflows-$BRANCH-$TIMESTAMP
            PR_URL=$(gh pr create \
              --head sync-workflows-$BRANCH-$TIMESTAMP \
              --base $BRANCH \
              --title "Sync workflow files from production to $BRANCH" \
              --body "Automated sync of .github/workflows/*.yml from production")
            gh pr edit "$PR_URL" --add-label changelog
            for i in {1..30}; do
              STATUS=$(gh pr status --json statusCheckRollup -q '.currentBranch.statusCheckRollup.state' --branch sync-workflows-$BRANCH-$TIMESTAMP)
              if [[ "$STATUS" == "SUCCESS" ]]; then
                echo "✅ Status checks passed for $BRANCH PR"
                gh pr merge "$PR_URL" --squash --delete-branch --admin
                break
              fi
              echo "⏳ Waiting for status checks for $BRANCH (attempt $i/30)..."
              sleep 10
            done
            if [[ "$STATUS" != "SUCCESS" ]]; then
              echo "❌ Status checks did not pass within timeout for $BRANCH PR"
              gh pr status --json statusCheckRollup --branch sync-workflows-$BRANCH-$TIMESTAMP
              exit 1
            fi
          done
