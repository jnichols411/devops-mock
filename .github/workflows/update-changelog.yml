name: Create and Merge Release PRs

on:
  workflow_call:
    inputs:
      new_tag:
        description: "The new SemVer tag"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  release_pr:
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ inputs.new_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Debug tag value
        run: |
          echo "NEW_TAG: ${{ env.NEW_TAG }}"
          if [[ -z "${{ env.NEW_TAG }}" ]]; then
            echo "‚ùå NEW_TAG is empty"
            echo "Inputs: ${{ toJSON(inputs) }}"
            exit 1
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Fetch branches
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/* +refs/heads/changelog/${NEW_TAG}:refs/remotes/origin/changelog/${NEW_TAG}

      - name: Verify changelog branch
        run: |
          if git ls-remote --heads origin changelog/${NEW_TAG} | grep -q changelog/${NEW_TAG}; then
            echo "‚úÖ Branch changelog/${NEW_TAG} exists in remote"
          else
            echo "‚ùå Branch changelog/${NEW_TAG} does not exist in remote"
            exit 1
          fi

      - name: Debug branch state
        run: |
          echo "Listing all branches:"
          git branch -r
          echo "Commits in changelog/${NEW_TAG} not in release:"
          git log origin/release..origin/changelog/${NEW_TAG} --oneline || echo "No commits found"
          echo "Diff between branches:"
          git diff origin/release..origin/changelog/${NEW_TAG} --name-only || echo "No differences found"
          echo "Head SHA of changelog/${NEW_TAG}:"
          git rev-parse origin/changelog/${NEW_TAG} || echo "SHA not found"
          echo "Head SHA of release:"
          git rev-parse origin/release || echo "SHA not found"

      - name: Validate changelog-only changes
        run: |
          DIFF_FILES=$(git diff origin/release..origin/changelog/${NEW_TAG} --name-only)
          if [[ "$DIFF_FILES" == "CHANGELOG.md" || -z "$DIFF_FILES" ]]; then
            echo "‚úÖ Only CHANGELOG.md modified or no changes"
          else
            echo "‚ùå Unexpected changes detected:"
            echo "$DIFF_FILES"
            exit 1
          fi

      - name: Wait for API synchronization
        run: sleep 30

      - name: Create Changelog PR
        id: create_pr
        run: |
          PR_URL=$(gh pr create \
            --head changelog/${NEW_TAG} \
            --base release \
            --title "üîñ Update CHANGELOG for ${NEW_TAG}" \
            --body "Automated changelog update for ${NEW_TAG}" 2>&1) || {
            echo "‚ùå Failed to create PR. Error: $PR_URL"
            gh api repos/${{ github.repository }}/compare/release...changelog/${NEW_TAG} || echo "Compare API call failed"
            exit 1
          }
          PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Created PR: $PR_URL"

      - name: Add changelog label
        run: |
          gh pr edit "${{ steps.create_pr.outputs.PR_URL }}" --add-label changelog

      - name: Debug PR status
        run: |
          echo "PR Number: ${{ steps.create_pr.outputs.PR_NUMBER }}"
          gh pr view ${{ steps.create_pr.outputs.PR_NUMBER }} --json statusCheckRollup,mergeable,state || {
            echo "‚ùå Failed to fetch PR details"
            exit 1
          }

      - name: Wait for status checks
        run: |
          for i in {1..30}; do
            PR_DATA=$(gh pr view ${{ steps.create_pr.outputs.PR_NUMBER }} --json statusCheckRollup,mergeable,state) || {
              echo "‚ùå Failed to fetch PR #${{ steps.create_pr.outputs.PR_NUMBER }}"
              exit 1
            }
            echo "PR Data: $PR_DATA"
            STATUS=$(echo "$PR_DATA" | jq -r 'if .statusCheckRollup == [] or .statusCheckRollup == null then "SUCCESS" else .statusCheckRollup.state end')
            if [[ "$STATUS" == "SUCCESS" || -z "$STATUS" ]]; then
              echo "‚úÖ Status checks passed or no checks required"
              exit 0
            fi
            echo "‚è≥ Waiting for status checks (attempt $i/30)..."
            sleep 10
          done
          echo "‚ùå Status checks did not pass within timeout"
          echo "Final PR Data:"
          gh pr view ${{ steps.create_pr.outputs.PR_NUMBER }} --json statusCheckRollup,mergeable,state || echo "‚ùå Failed to fetch final PR details"
          exit 1

      - name: Merge Changelog PR
        run: |
          gh api \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/pulls/${{ steps.create_pr.outputs.PR_NUMBER }}/merge \
            -f merge_method=squash \
            -f commit_title="Update CHANGELOG for ${NEW_TAG}" \
            -f commit_message="Automated changelog update for ${NEW_TAG}" || {
              echo "‚ùå Failed to merge PR via API. Debugging info:"
              gh pr view "${{ steps.create_pr.outputs.PR_URL }}" --json state,mergeable,labels,headRefName,baseRefName
              exit 1
            }
          gh api \
            -X DELETE \
            repos/${{ github.repository }}/git/refs/heads/changelog/${NEW_TAG} || echo "Failed to delete branch changelog/${NEW_TAG}"

      - name: Create & auto-merge Release‚ÜíProduction PR
        run: |
          PR_URL=$(gh pr create \
            --head release \
            --base production \
            --title "üîÄ Merge ${NEW_TAG} into production" \
            --body "Automated release after tagging ${NEW_TAG}")
          gh pr merge "$PR_URL" \
            --auto --squash
